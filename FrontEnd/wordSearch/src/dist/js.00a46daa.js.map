{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","js/Grid.js","js/index.js"],"names":["Grid","wordSelectMode","selectedItems","firstSelectedItem","words","gridArea","foundWords","firstLetter","currentLetter","cellsInRange","x","y","i","push","querySelector","delta","gridSize","wordGrid","document","getElementsByClassName","lastChild","removeChild","tbl","createElement","tblBody","index","row","j","cell","letter","cellText","createTextNode","appendChild","setAttribute","addEventListener","event","target","getAttribute","forEach","classList","remove","getCellsInRange","add","grid","selectedWord","reduce","word","reverseSelectedWord","split","reverse","join","indexOf","item","submitWordBtn","commaSeperetedWords","value","fetchGridinfo","result","renderGrid","wordListNode","wordListSection","fetch","response","text"],"mappings":"AEAA,ACAA,ACAA,AHAA,ADAA;AECA,ACAA,ACAA,AHAA,ADAA;AECA,ACAA,ACAA,AJAA;AECA,ACAA,ACAA,AJAA;AECA,ACAA,ACAA,AJAA;AECA,ACAA,ACAA,AJAA;AECA,ACAA,ACAA,AJAA,AMNA;AJOA,AEAA,AJAA;AECA,AEAA,AJAA;AECA,AEAA,AJAA;AECA,AEAA,AJAA,AMRA,IAAMqD,aAAa,GAAGnC,QAAQ,CAACJ,aAAT,CAAuB,cAAvB,CAAtB;AJSA,AEAA,AJAA,AMNAuC,aAAa,CAACnB,gBAAd,CAA+B,OAA/B,uFAAwC;AJOxC,AEAA,AJAA,AMPwC;AJQxC,AEAA,AJAA,AKZA,ACIwC;AJSxC,AEAA,AJAA,AMTwC,IDH3BlC;AHab,AEAA,AJAA,AKZI,ACEoC,kBDFtB;AHalB,AEAA,AJAA,AKbkB,ACEsB;AJYxC,AFAA,AKbQ,ACEE2C,SDFG1C,CCEH0C,IAD8B,GACvB,IAAI3C,EDFb,GAAsB,KAAtB,ACES,CDHC,CAEV,ACAgC;AJaxC,AFAA,AMXI2C,UAAAA,IAAI,CAACvC,KAAL,GAAa,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,CAAb;AJYJ,AFAA,AKbQ,ACEEkD,SDFGpD,CCEHoD,YDFF,GAAqB,EAArB,ECDgC,GAGRpC,QAAQ,CAACJ,aAAT,CAAuB,WAAvB,EAAoCyC,KAH5B;AJexC,AFAA,AKZQ,ACCEvC,SDDGb,CCCHa,QAJ8B,GAInBE,KDDb,GCCqB,CAACJ,aAAT,CAAuB,YAAvB,EAAqCyC,KAJlB;AJgBxC,AFAA,AKZQ,ACJgC,SDI3BnD,KAAL,GAAa,EAAb;AHaR,AFAA,AKZQ,ACLgC,SDK3BC,QAAL,ACAemD,GDAC,IAAhB,MCA4B,CAACxC,QAAD,EAAWsC,mBAAX,CALI;AJkBxC,AFAA,AKZQ,SAAKhD,UAAL,GAAiB,EAAjB;AHaR,AFAA,AKZK,ACPmC,IDSpC;AHWJ,AFAA,AMfQmD,UAAAA,MALgC;AJqBxC,AFAA,AMfId,UAAAA,IAAI,CAACvC,KAAL,GAAYkD,mBAAmB,CAACN,KAApB,CAA0B,GAA1B,CAAZ;AJgBJ,AFAA,AMfIL,UAAAA,IAAI,CAACe,U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":"js.00a46daa.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","\r\n// render Grid on page\r\nexport class Grid {\r\n    constructor() {\r\n        this.wordSelectMode = false;\r\n        // save cells that user select in array\r\n        this.selectedItems = [];\r\n\r\n        this.firstSelectedItem;\r\n        this.words = [];\r\n        this.gridArea = null;\r\n        this.foundWords =[];\r\n    }\r\n\r\n    // move in one direction\r\n    getCellsInRange(firstLetter, currentLetter) {\r\n        let cellsInRange = [];\r\n\r\n        if (firstLetter.x > currentLetter.x || firstLetter.y > currentLetter.y) {\r\n            [currentLetter, firstLetter] = [firstLetter, currentLetter];\r\n        }\r\n        if (firstLetter.y === currentLetter.y) {\r\n\r\n            for (let i = firstLetter.x; i <= currentLetter.x; i++) {\r\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${i}\"][data-y=\"${currentLetter.y}\"]`));\r\n            }\r\n        } else if (firstLetter.x === currentLetter.x) {\r\n\r\n            for (let i = firstLetter.y; i <= currentLetter.y; i++) {\r\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${currentLetter.x}\"][data-y=\"${i}\"]`));\r\n            }\r\n        } else if (currentLetter.x - firstLetter.x === currentLetter.y - firstLetter.y) {\r\n            let delta = currentLetter.y - firstLetter.y;\r\n            for (let i = 0; i <= delta; i++) {\r\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${firstLetter.x + i}\"][data-y=\"${firstLetter.y + i}\"]`));\r\n            }\r\n        }\r\n\r\n\r\n        return cellsInRange;\r\n    }\r\n\r\n    renderGrid(gridSize, wordGrid) {\r\n\r\n\r\n\r\n        // get the reference for the gridArea\r\n        var gridArea = document.getElementsByClassName(\"grid-area\")[0];\r\n        //handle rendering multiple Grids\r\n        if (gridArea.lastChild) {\r\n            gridArea.removeChild(gridArea.lastChild);\r\n        }\r\n        this.gridArea = gridArea;\r\n\r\n        // creates a <table> element and a <tbody> element\r\n        var tbl = document.createElement(\"table\");\r\n        var tblBody = document.createElement(\"tbody\");\r\n        let index = 0;\r\n\r\n        // creating all cells\r\n        for (var i = 0; i < gridSize; i++) {\r\n            // creates a table row\r\n            var row = document.createElement(\"tr\");\r\n\r\n            for (var j = 0; j < gridSize; j++) {\r\n                // Create a <td> element and a text node, make the text\r\n                // node the contents of the <td>, and put the <td> at\r\n                // the end of the table row\r\n                var cell = document.createElement(\"td\");\r\n                let letter = wordGrid[index++];\r\n                var cellText = document.createTextNode(letter);\r\n\r\n\r\n\r\n                cell.appendChild(cellText);\r\n                cell.setAttribute(\"data-x\", i);\r\n                cell.setAttribute(\"data-y\", j);\r\n                cell.setAttribute(\"data-letter\", letter);\r\n                row.appendChild(cell);\r\n            }\r\n\r\n            // add the row to the end of the table gridArea\r\n            tblBody.appendChild(row);\r\n        }\r\n\r\n        // put the <tbody> in the <table>\r\n        tbl.appendChild(tblBody);\r\n        // appends <table> into <body>\r\n        gridArea.appendChild(tbl);\r\n\r\n        //Click Handlers\r\n        tbl.addEventListener(\"mousedown\", (event) => {\r\n            this.wordSelectMode = true;\r\n            const cell = event.target;\r\n            // putting + to convert it to num\r\n            let x = +cell.getAttribute(\"data-x\");\r\n            let y = +cell.getAttribute(\"data-y\");\r\n            let letter = cell.getAttribute(\"data-letter\");\r\n            this.firstSelectedItem = {\r\n                x, y\r\n            };\r\n\r\n\r\n        });\r\n\r\n        tbl.addEventListener(\"mousemove\", (event) => {\r\n            // check if inline with first item\r\n            if (this.wordSelectMode) {\r\n                const cell = event.target;\r\n\r\n                let x = +cell.getAttribute(\"data-x\");\r\n                let y = +cell.getAttribute(\"data-y\");\r\n                let letter = cell.getAttribute(\"data-letter\");\r\n                this.selectedItems.forEach(cell => cell.classList.remove(\"selected\"));\r\n                this.selectedItems = this.getCellsInRange(this.firstSelectedItem, { x, y });\r\n                this.selectedItems.forEach(cell => cell.classList.add(\"selected\"));\r\n\r\n            }\r\n        });\r\n\r\n        tbl.addEventListener(\"mouseup\", (event) => {\r\n            const grid = new Grid();\r\n            this.wordSelectMode = false;\r\n            const selectedWord = this.selectedItems.reduce((word, cell) => word += cell.getAttribute(\"data-letter\"), '');\r\n            // if the user selected word reversely\r\n            const reverseSelectedWord = selectedWord.split(\"\").reverse().join(\"\");\r\n            if (this.words.indexOf(selectedWord) !== -1) {\r\n                this.foundWords.push(selectedWord);\r\n            } else if (this.words.indexOf(reverseSelectedWord) !== -1) {\r\n                this.foundWords.push(reverseSelectedWord);\r\n            }else{\r\n                this.selectedItems.forEach(item => item.classList.remove(\"selected\"));\r\n            }\r\n            // empty array after mouse up\r\n            this.selectedItems = [];\r\n           \r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n}","import { Grid } from \"./Grid\";\r\n\r\nconst submitWordBtn = document.querySelector(\".submit-word\");\r\n\r\n\r\nsubmitWordBtn.addEventListener(\"click\", async () => {\r\n    const grid = new Grid();\r\n    grid.words = [\"one\", \"two\", \"three\"];\r\n    const commaSeperetedWords=  document.querySelector(\"#add-word\").value;\r\n    const gridSize=  document.querySelector(\"#grid-size\").value;\r\n    let result = await fetchGridinfo(gridSize, commaSeperetedWords);\r\n    grid.words= commaSeperetedWords.split(\",\")\r\n    grid.renderGrid(gridSize, result);\r\n    \r\n    let wordListNode = document.createTextNode(grid.words);\r\n    let wordListSection = document.querySelector(\".word-list\");\r\n    \r\n\r\n    if (wordListSection.lastChild) {\r\n        wordListSection.removeChild(gridArea.lastChild);\r\n    }\r\n    wordListSection.appendChild(wordListNode);\r\n\r\n});\r\n\r\n// fetching endpoint using fetch api\r\nasync function fetchGridinfo(gridSize, commaSeperetedWords) {\r\n    \r\n    // ${} allows us to assign string in place\r\n    let response = await fetch(`http://localhost:8080//wordGrid?gridSize=${gridSize}&wordList=${commaSeperetedWords}`);\r\n    let result = await response.text();\r\n    return result.split(\" \");\r\n}"]}